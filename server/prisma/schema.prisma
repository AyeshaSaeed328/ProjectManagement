generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(cuid())
  email                   String        @unique
  username                String        @unique
  profilePicture          String?
  teamId                  String?
  passwordHash            String
  role                    UserRole      @default(USER)
  refreshToken            String?
  loginType               UserLoginType @default(EMAIL_PASSWORD)
  isEmailVerified         Boolean       @default(false)
  forgotPasswordToken     String?
  forgotPasswordExpiry    DateTime?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authoredTasks   Task[]           @relation("TaskAuthor")
  assignedTasks   Task[]           @relation("TaskAssignee")
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
  team            Team?            @relation(fields: [teamId], references: [id])
  managedProjects Project[]        @relation("ProjectManager")
  leadOfTeams     Team[]           @relation("TeamLead")
  chats          Chat[]    @relation("ChatUsers")
  adminChats     Chat[]    @relation("ChatAdmin")
  messages       Message[] @relation("UserMessages")
}

model Team {
  id         String  @id @default(cuid())
  teamName   String
  teamLead   User?   @relation("TeamLead", fields: [teamLeadId], references: [id])
  teamLeadId String?

  projectTeams ProjectTeam[]
  members      User[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ProjectStatus @default(NOT_STARTED)
  managerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams   ProjectTeam[]
  tasks   Task[]
  manager User          @relation("ProjectManager", fields: [managerId], references: [id])
}

model ProjectTeam {
  id        String @id @default(cuid())
  teamId    String
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team    Team    @relation(fields: [teamId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([teamId, projectId])
}

model Task {
  id             String   @id @default(cuid())
  title          String
  description    String?
  status         Status   @default(TODO)
  priority       Priority
  tags           String?
  startDate      DateTime
  endDate        DateTime
  points         Int
  projectId      String
  authorId       String
  assignedUserId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorId], references: [id])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [id])
  taskAssignments TaskAssignment[]
  comments        Comment[]
  attachments     Attachment[]
}

model TaskAssignment {
  id     String @id @default(cuid())
  userId String
  taskId String

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId])
}

model Comment {
  id     String @id @default(cuid())
  text   String
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

// model Attachment {
//   id           String  @id @default(cuid())
//   fileUrl      String
//   fileName     String?
//   taskId       String
//   uploadedById String

//   task       Task @relation(fields: [taskId], references: [id])
//   uploadedBy User @relation(fields: [uploadedById], references: [id])
// }

model Attachment {
  id         String   @id @default(cuid())
  fileName   String
  fileType   String // e.g., image/png, application/pdf
  url        String // Public URL or local path
  size       Int? // File size in bytes
  public_id  String?
  message    Message?  @relation(fields: [messageId], references: [id])
  messageId  String?
  uploadedAt DateTime @default(now())
  
  taskId     String?
  uploadedById String

  task       Task? @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [id])
}

model Chat {
  id            String    @id @default(cuid())
  name          String
  isGroupChat   Boolean   @default(false)
  participants  User[]    @relation("ChatUsers")
  admin         User?      @relation("ChatAdmin", fields: [adminId], references: [id])
  adminId       String?
  lastMessage   Message?  @relation("LastMessage", fields: [lastMessageId], references: [id]) 
  lastMessageId String?   @unique
  lastMessageAt  DateTime?  @default(now())
  messages      Message[] @relation("ChatMessages")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id          String       @id @default(cuid())
  content     String
  chatId      String
  senderId    String
  attachments Attachment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  chat   Chat   @relation("ChatMessages", fields: [chatId], references: [id])
  sender User   @relation("UserMessages", fields: [senderId], references: [id])
  lastMessageOf  Chat?      @relation("LastMessage")


}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum UserLoginType {
  EMAIL_PASSWORD
  GOOGLE
  GITHUB
}

enum UserRole {
  MANAGER
  USER
}
