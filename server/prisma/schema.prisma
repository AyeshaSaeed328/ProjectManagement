

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id @default(cuid())
  email                   String        @unique
  username                String        @unique
  profilePicture          String?
  teamId                  String?
  passwordHash            String
  role                    UserRole      @default(USER)
  refreshToken            String?
  loginType               UserLoginType @default(EMAIL_PASSWORD)
  isEmailVerified         Boolean       @default(false)
  forgotPasswordToken     String?
  forgotPasswordExpiry    DateTime?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authoredTasks     Task[]           @relation("TaskAuthor")
  assignedTasks     Task[]           @relation("TaskAssignee")
  taskAssignments   TaskAssignment[]
  attachments       Attachment[]
  comments          Comment[]
  team              Team?            @relation(fields: [teamId], references: [id])
  managedProjects   Project[]        @relation("ProjectManager")
  leadOfTeams       Team[]           @relation("TeamLead")
}

model Team {
  id               String  @id @default(cuid())
  teamName         String
  teamLead        User?   @relation("TeamLead" ,fields: [teamLeadId], references: [id])
  teamLeadId      String?

  projectTeams   ProjectTeam[]
  members        User[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      ProjectStatus @default(NOT_STARTED)
  managerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams ProjectTeam[]
  tasks Task[]
  manager User @relation("ProjectManager", fields: [managerId], references: [id])
}

model ProjectTeam {
  id        String @id @default(cuid())
  teamId    String
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team    Team    @relation(fields: [teamId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([teamId, projectId])
}

model Task {
  id             String   @id @default(cuid())
  title          String
  description    String?
  status         Status   @default(TODO)
  priority       Priority
  tags           String?
  startDate      DateTime
  endDate        DateTime
  points         Int
  projectId      String
  authorId       String
  assignedUserId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  project         Project          @relation(fields: [projectId], references: [id])
  author          User             @relation("TaskAuthor", fields: [authorId], references: [id])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [id])
  taskAssignments TaskAssignment[]
  comments        Comment[]
  attachments     Attachment[]
}

model TaskAssignment {
  id     String @id @default(cuid())
  userId String
  taskId String

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId])
}

model Comment {
  id     String @id @default(cuid())
  text   String
  taskId String
  userId String

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Attachment {
  id           String  @id @default(cuid())
  fileUrl      String
  fileName     String?
  taskId       String
  uploadedById String

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [id])
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum UserLoginType {
  EMAIL_PASSWORD
  GOOGLE
  GITHUB
}

enum UserRole {
  MANAGER
  USER
}